#!/usr/bin/env Rscript
suppressPackageStartupMessages(library("argparse"))

# create parser object
parser <- ArgumentParser()

# specify our desired options
# by default ArgumentParser will add an help option
parser$add_argument("-i", "--input", required=TRUE, help="load preprocessed RData")
parser$add_argument("-m", "--meta", required=TRUE, help="load metatable")
parser$add_argument("-n", "--num", default = 50, help="number of cells within one cluster [default %(default)s]")
parser$add_argument("--bcv", default = 0.1, help="number of bcv [default %(default)s]")
parser$add_argument("--pval", default = 0.05, help="p-value [default %(default)s]")
parser$add_argument("--fdr", default = 0.05, help="fdr [default %(default)s]")
parser$add_argument("-o", "--output", required=TRUE, help="output file prefix")
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
args <- parser$parse_args()
suppressPackageStartupMessages(library("SnapATAC"))
suppressPackageStartupMessages(library("data.table"))

RDataF = args$input
metaF = args$meta
N = args$num
bcv = as.numeric(args$bcv)
pval = as.numeric(args$pval)
fdr = as.numeric(args$fdr)
outF = args$output

# export marker genes
# load snap
load(RDataF)

# export metatable
sumTable <- read.table(metaF, sep="\t", header = T)
colnames(sumTable)[which(colnames(sumTable)=="datasets")] <- "sample"
metaTable <- data.frame(sample=x.sp@sample, x.sp@metaData, cluster=x.sp@cluster)
metaTable <- merge(metaTable, sumTable, by = "sample")

.libPaths("/home/yangli1/R/x86_64-pc-linux-gnu-library/3.4")
suppressPackageStartupMessages(library("tidyr"))
metaTable <- unite(metaTable, Cell, c("sample","barcode"), sep=".")

metaFname <- paste(outF, "meta.tsv", sep=".")
fwrite(metaTable, metaFname, sep="\t", col.names = T, row.names = F, quote = F)

